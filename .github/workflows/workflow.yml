name: CI/CD
on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - name: Install yarn
        run: npm install -g yarn
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: install deps
        run: yarn install
      - name: Run lint
        run: yarn lint
      - name: Clean up
        if: always()
        run: npm uninstall -g yarn

  test:
    needs: lint
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - name: Install yarn
        run: npm install -g yarn
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      - name: Run test
        run: yarn test
      - name: Clean up
        if: always()
        run: npm uninstall -g yarn

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build and run Docker containers
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        run: |
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
          echo "DATABASE_URL=${DATABASE_URL}" >> .env
          echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}" >> .env
          echo "NODE_ENV=${NODE_ENV}" >> .env
          echo "SESSION_SECRET=${SESSION_SECRET}" >> .env
          docker compose build
          docker container rm -f app-1 || true
          docker compose up -d
      - name: Clean up Docker
        run: |
          docker system prune -a -f
